?as.data.frame()
year_2011 = as.data.frame(year_2011)
typeof(year_2011)
typeof(hflights)
?type
?arrange
arrange(hflights, hflights$AirTime)
x = arrange(hflights, hflights$AirTime)
View(x)
x = arrange(hflights, hflights$AirTime, desc())
x = arrange(hflights, hflights$AirTime, desc = True)
x = arrange(hflights, hflights$AirTime, desc())
x = arrange(hflights, desc(hflights$AirTime))
x = arrange(hflights, desc(hflights$AirTime, True))
x = arrange(hflights, desc(hflights$AirTime, False))
?desc
?arrange
?select
s = hflights %>% select(DepTime, AirTime)
View(s)
s = filter(hflights %>% select(DepTime, AirTime), hflights$UniqueCarrier='AA')
s = filter(hflights %>% select(DepTime, AirTime), hflights$DepTime=1400)
s = filter(hflights %>% select(DepTime, AirTime), hflights$DepTime=1400)
x = hflights %>% select(DepTime, AirTime)
s = filter(x, hflights$DepTime=1400)
s = filter(x, hflights$DepTime==1400)
?filter
?mutate
hflights$add = hflights$DayofMonth*2
hflights$add = hflights$DayofMonth*2
?summarise
?group_by
hflights %>%
group_by(DepTime)
s =hflights %>%
group_by(DepTime)
s = hflights %>%
group_by(DepTime)
s = hflights %>%
group_by(DayOfWeek)
s = hflights %>%
group_by(DayOfWeek)
1+1
s = hflights %>%
group_by(DayOfWeek)
hflights %>%
groupby(UniqueCarrier) %>%
filter(FlightNum == 428) %>%
summarise(mean(AirTime))
hflights %>%
group_by(UniqueCarrier) %>%
filter(FlightNum == 428) %>%
summarise(mean(AirTime))
hflights %>%
group_by(UniqueCarrier) %>%
filter(FlightNum == 428) %>%
summarise(MEAN = mean(AirTime))
View(hflights)
summary(hflights)
?summarize
library("ggplot")
library("ggplot3")
?ggplot
?ggplot3
summary(hflights)
view(hflights)
library(ggplot3)
library(ggplot2)
install.packages("ggplot3")
install.packages("ggplot2")
library(ggplot2)
view(hflights)
?ggplot
attach(hflights)
ggplot(data = hflights, aes(x=FlightNum, y=Distance),
colors = Dest)
ggplot(data = hflights, aes(x=FlightNum, y=Distance))
?ggplot
ggplot(data = hflights, aes(x=FlightNum, y=Distance))
ggplot(data = hflights, aes(x=Cancelled, y=Distance))
fix(hflights)
attach(hflights)
ggplot(data = hflights, aes(x=Cancelled, y=Distance))
View(hflights)
ggplot(data = hflights, aes(y=Distance))
ggplot(data = hflights, aes(x=Distance))
ggplot(data = hflights, aes(x=FlightNum,y=Distance))
ggplot(data = hflights, mapping = aes(x=FlightNum,y=Distance))
?ggplot
ggplot(data = hflights, mapping = aes(x=FlightNum,y=Distance))
ggplot(data = hflights, mapping = aes(x=FlightNum,y=Distance))
library(ggplot2)
attach(hflights)
ggplot(data = hflights, mapping = aes(x=FlightNum,y=Distance))
ggplot(data = hflights, mapping = aes(x=FlightNum,y=Distance)) +
geom_point()
ggplot(data = hflights, mapping = aes(x=UniqueCarrier ,y=Distance)) +
geom_point()
ggplot(data = hflights, mapping = aes(x=UniqueCarrier ,y=Distance)) +
geom_bar()
ggplot(data = hflights, mapping = aes(x=UniqueCarrier ,y=Distance)) +
geom_bar()
ggplot(data = hflights, mapping = aes(x=UniqueCarrier ,y=Distance)) +
geom_bar())
ggplot(data = hflights, mapping = aes(x=UniqueCarrier ,y=Distance)) +
geom_point())
1_1
1+1
ggplot(data = hflights, mapping = aes(x=UniqueCarrier ,y=Distance)) +
geom_point())
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier ,y=Distance)) +
geom_point()
library(ggplot2)
attach(hflights)
fix(hflights)
hf = hflights[1:1000,]
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier ,y=Distance)) +
geom_point()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier ,y=Distance)) +
geom_bar()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier)) +
geom_bar()
?ggplot
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, colours=FlightNum)) +
geom_bar()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, colours=UniqueCarrier)) +
geom_bar()
?ggplot
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, colours='red')) +
geom_bar()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, colors='red')) +
geom_bar()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier), colors='red') +
geom_bar()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier)) +
geom_bar(colors='red')
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier)) +
geom_bar(colours='red')
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, colour="red")) +
geom_bar()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, colour=DepTime)) +
geom_bar()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, colour=UniqueCarrier)) +
geom_bar()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, colour=UniqueCarrier)) +
geom_point()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, y=Distance, colour=UniqueCarrier)) +
geom_point()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, y=Distance, colour="UniqueCarrier"smooth)) +
geom_point()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, y=Distance, colour="smooth")) +
geom_point()
ggplot(data = hflights,
mapping = aes(x=UniqueCarrier, y=Distance, colour="blue")) +
geom_point()
mapping = aes(x=UniqueCarrier, y=Distance, colour=blue) +
colour()
colours()
rm(hflights)
library(forecast)
library(ggfortify)
library(tseries)
install.packages("forecast")
install.packages("tseries")
install.packages("ggfortify")
library(ggfortify)
library(tseries)
library(forecast)
fix(AirPassengers)
fix(AirPassengers)
AP <- AirPassengers
plot(AP)
AirPassengers
?abline
?lm
reg = lm(AP~time(AP))
?abline
abline(reg = reg)
?abline
abline(reg = reg, colors = 'red')
abline(reg = reg, colors = 'Blue')
abline(reg = reg, col = 'blue')
# Transforming data to make stationary
?plot
?aggregate
# Trend
plot(aggregate(AP, FUN = mean))
abline(reg = reg, col = 'blue')
# Trend
plot(aggregate(AP, FUN = mean))
# Trend
plot(aggregate(AP, FUN = mean), ylab = "Mean", main = "Trend")
plot(AP)
plot(AP, ylab = "AirPassegers")
# Trend
plot(aggregate(AP, FUN = mean), ylab = "Mean", main = "Trend")
?aggregate
# Trend
plot(aggregate(AP, FUN = mean), ylab = "Mean", main = "Trend")
?time
time(AP)
# Trend
plot(aggregate(AP, FUN = mean), ylab = "Mean", main = "Trend")
# Trend
plot(aggregate(AP, FUN = mean), ylab = "Mean", main = "Trend")
?seasonal
# Trend (Upwards)
plot(aggregate(AP, FUN = mean), ylab = "Mean", main = "Trend", col = 'blue')
# Trend (Upwards)
plot(aggregate(AP, FUN = mean), ylab = "Mean", main = "Trend", col = 'red')
class(AP)
# Trend + Seasonality + Irregular Fluctuations
# Analyse them
?boxplot
cycle(AP)
?cycle
boxplot(AP)
?cycle
AP~cycle(AP)
cyc = AP~cycle(AP)
cyc
cycle(AP)
cyc = AP~cycle(AP)
boxplot(AP~cycle(AP))
# Log transform
plot(log(AP))
# Log transform
plot(diff(log(AP)))
# Log transform
plot(log(AP))
# Log still not stationary because mean is changing
# difference it
plot(diff(log(AP)))
# Log still not stationary because mean is changing
# difference it
# Works. YAY!
plot(diff(log(AP)), ylab = "Difference of log AP")
# Lets Do ARIMA model to explain the series and Forecast
?acf
acf(AP)
acf(diff(log(AP)))
pcf(diff(log(AP))) # p =
pacf(diff(log(AP))) # p =
?arima
fit <- arima(log(AP), c(0,1,1))
?predict.Arima
fit <- arima(log(AP), c(0,1,1), seasonal = list(order(c(0,1,1))))
fit <- arima(log(AP), c(0,1,1), seasonal = list(order = c(0,1,1)))
pred <- predict(fit, n.ahead = 10*12)
attributes(pred)
pred1 <- 2.718^pred$pred
pred1
ts.plot(AP, pred1)
ts.plot(AP, pred1, lty = c(1,3))
?ts.plot
?lty
ts.plot(AP, pred1, lty = c(1,3))
?ts.plot
ts.plot(AP, pred1, lty = c(1,3), log = 'y')
# Test
?ts
start(AP)
end(AP)
train <- ts(AP, start = c(1949,1), end = c(1959,12), frequency = 12)
fit_testing <- arima(log(AP), c(0,1,1), seasonal = list(order = c(0,1,1)))
pred_testing <- predict(fit, n.ahead = 10*12)
pred_testing <- predict(fit, n.ahead = 1*12)
pred_testing$prd
pred_testing$pred
pred_testing = 2.718^pred_testing$pred
pred_testing$pred
pred_testing = 2.718^pred_testing$pred
pred_testing <- predict(fit, n.ahead = 1*12)
pred_testing = 2.718^pred_testing
pred_testing$pred
pred_testing = 2.718^pred_testing$pred
pred_testing$pred
pred_testing
pred_testing <- predict(fit, n.ahead = 12)
pred_testing$pred
pred_testing = 2.718^pred_testing$pred
pred_testing
train <- ts(AP, start = c(1949,1), end = c(1959,12), frequency = 12)
fit_testing <- arima(log(AP), c(0,1,1), seasonal = list(order = c(0,1,1)))
pred_testing <- predict(fit, n.ahead = 10*12)
pred_testing$pred
train <- ts(AP, start = c(1949,1), end = c(1959,12), frequency = 12)
fit_testing <- arima(log(train), c(0,1,1), seasonal = list(order = c(0,1,1)))
pred_testing <- predict(fit, n.ahead = 12)
pred_testing$pred
pred_testing = 2.718^pred_testing$pred
pred_testing
train <- ts(AP, start = c(1949,1), end = c(1959,12), frequency = 12)
AP <- AirPassengers
AP
train <- ts(AP, start = c(1949,1), end = c(1959,12), frequency = 12)
fit_testing <- arima(log(train), c(0,1,1), seasonal = list(order = c(0,1,1)))
pred_testing <- predict(fit, n.ahead = 12)
pred_testing$pred
train <- ts(AP, start = c(1949,1), end = c(1959,12), frequency = 12)
fit_testing <- arima(log(train), c(0,1,1), seasonal = list(order = c(0,1,1)))
pred_testing <- predict(fit, n.ahead = 10*12)
pred_testing$pred
train <- ts(AP, start = c(1949,1), end = c(1959,12), frequency = 12)
fit_testing <- arima(log(train), c(0,1,1), seasonal = list(order = c(0,1,1)))
pred_testing <- predict(fit_testing, n.ahead = 12)
pred_testing$pred
pred_testing = 2.718^pred_testing$pred
pred_testing
original_1960 <- ts(AP, start = c(1960,1), end = c(1960,12), frequency = 12)
clear
pred_testing
original_1960
tail(AP, 12)
original_1960 <- tail(AP, 12)
original_1960
# Mean Sq Err
MSE <- ((original_1960) - (pred_testing))^2/12
MSE
# Mean Sq Err
MSE <- (mean(original_1960) - mean(pred_testing))^2/12
MSE
# https://otexts.com/fpp2/tspatterns.html
ls()
rm(ls())
# https://otexts.com/fpp2/tspatterns.html
typeof(ls())
rm(list = ls())
install.packages("fpp2")
library("fpps2")
library(fpps2)
library(fpp2)
data = read.csv("C:\Users\asan\Desktop\RSXFSN")
data = read.csv("RSXFSN")
data = read.csv("RSXFSN.csv")
data = read.csv("C:\Users\asan\Desktop\RSXFSN.csv")
data = read.csv("C:/Users/asan/Desktop/RSXFSN.csv")
View(data)
typeof(data)
class(data)
?ts
data <- ts(data=data)
View(data)
View(data)
data = read.csv("C:/Users/asan/Desktop/RSXFSN.csv")
data <- ts(data=data1[,2])
data1 = read.csv("C:/Users/asan/Desktop/RSXFSN.csv")
# https://otexts.com/fpp2/tspatterns.html
rm(list = ls())
data1 = read.csv("C:/Users/asan/Desktop/RSXFSN.csv")
data <- ts(data=data1[,2])
data
# Time plot
?autoplot
autoplot(data)
autoplot(data, ylab = "d")
View(data1)
start(data)
end(data)
start(data1)
?start
data <- ts(data=data1[,2], start = c(1992,1), frequency = 12)
data
autoplot(data, ylab = "d")
autoplot(data, ylab = "Sales")
# Strong trend in data
# Take the first difference of data
autoplot(diff(data), ylab = "Sales")
# Trend removed now, series looks trend-stationary. Look seasonality now
?ggseasonplot
ggseasonplot(diff(data))
seasonality(diff(data))
?seasonality
?seasonplot
install.packages("aplot")
library(aplot)
seasonality(diff(data))
seasonality(data = diff(data))
ggsubseriesplot(diff(data))
# Seasonal Naive method as benchmark
# Trend gone seasonality there so need to consider
?snaive
fir <- snaive(diff(data))
fit <- snaive(diff(data))
rm(fir)
print(sumary(fit))
print(summary(fit))
# Residual sd: 9075.8456
checkresiduals(fit)
# ETS model. Exponential smoothing model
fit.ets <- ets(diff(data))
print(summary(fit))
checkresiduals(fit)
print(summary(fit.ets))
checkresiduals(fit.ets)
# ETS model. Exponential smoothing model
fit.ets <- ets(data)
print(summary(fit.ets))
checkresiduals(fit.ets)
RM(LIST=LS())
rm(list=ls())
pwd
setwd
getwd()
gsetwd("C:/Users/asan/github/data_science/Time_Series_Analysis")
getwd("C:/Users/asan/github/data_science/Time_Series_Analysis")
setwd("C:/Users/asan/github/data_science/Time_Series_Analysis")
nottem
data = nottem
str(nottem)
?stl
decomp <- stl(data, s.window = "periodic")
attributes(decomp)
plot(decomp)
?stl
plot(stl(data, "per"))
plot(decomp)
library(fpps)
library(fpp2)
library(forecast)
data("ausbeer")
rm(ausbeer)
rm(data)
rm(decomp)
fix(ausbeer)
ts(ausbeer)
ts(ausbeer, start= c(1955,1), end = c(1975,12))
data <- ts(ausbeer, start= c(1955,1), end = c(1975,12))
data <- ts(ausbeer)
rm(ausbeer)
# create moving average that will be close to trend
?ma
plot(data)
data
ausbeer
?ts
data <- ts(ausbeer, start = 1956, end = 2010)
plot(data)
data <- ts(ausbeer, start = 1956, end = 2010, frequency = 4)
######################
# Example 2
######################
start(ausbeer)
######################
# Example 2
######################
frequency(ausbeer)
ausbeer
plot(data)
data
data <- ts(ausbeer, start = 1956, end = 1976, frequency = 4)
plot(data)
data.trend = ma(data, order = 4, center = T)
data.trend = ma(data, order = 4, center = "T")
# create moving average that will be close to trend
?ma
data.trend = ma(data, order = 4, center = True)
data.trend = ma(data, order = 4, center = T)
data.trend = ma(data, order = 4, centre = True)
data.trend = ma(data, order = 4, centre = T)
data.trend = ma(data, order = 4, centre = TRUE)
plot(data)
line(data.trend)
lines(data.trend)
lines(data.trend, col = "red")
data.trend = ma(data, order = 2, centre = TRUE)
plot(data)
lines(data.trend, col = "red")
data.trend = ma(data, order = 3, centre = TRUE)
plot(data)
lines(data.trend, col = "red")
data.trend = ma(data, order = 4, centre = TRUE)
plot(data)
lines(data.trend, col = "red")
# Remove trend
data.detrend = data - data.trend
class(data.detrend)
plot(data.detrend)
plot(log(data))
?seq_along
?seq
#############
# Adding trend to Linear Regression
#############
trend <- seq(1:10)
#############
# Adding trend to Linear Regression
#############
trend <- seq(1:len(data))
#############
# Adding trend to Linear Regression
#############
trend <- seq(1:length(data))
trend
